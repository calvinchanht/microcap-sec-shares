# build-shares.yml â€” v1.4.1
# - Passes SEC_SIC_PROXY_BASE explicitly to SIC step
# - Prints effective env for clarity
# - Daily build + monthly heartbeat + Pages deploy

name: Build SEC Shares

on:
  workflow_dispatch:
  schedule:
    - cron: "17 7 * * *"   # daily ~07:17 UTC
    - cron: "0 3 1 * *"    # monthly heartbeat commit

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  UA: "Mozilla/5.0 MicroCap microcap@gmail.com"
  # Your Worker proxy for SEC (recommended). Keep both names for safety.
  SIC_PROXY_BASE: "https://microcapsec.calvinchanht.workers.dev/sec"
  SEC_SIC_PROXY_BASE: "https://microcapsec.calvinchanht.workers.dev/sec"

jobs:
  build:
    if: github.event.schedule != '0 3 1 * *'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo effective env
        run: |
          echo "UA=$UA"
          echo "SIC_PROXY_BASE=$SIC_PROXY_BASE"
          echo "SEC_SIC_PROXY_BASE=$SEC_SIC_PROXY_BASE"

      - name: Create work dirs
        run: |
          set -e
          mkdir -p cf public

      - name: Download SEC companyfacts.zip (UA) + verify
        run: |
          set -e
          echo "[INFO] Fetching companyfacts.zip with UA: $UA"
          curl -L --fail --retry 5 --retry-all-errors --retry-delay 2 \
               -H "User-Agent: $UA" \
               -H "Accept-Encoding: identity" \
               -o companyfacts.zip \
               https://www.sec.gov/Archives/edgar/daily-index/xbrl/companyfacts.zip
          if ! unzip -tq companyfacts.zip >/dev/null 2>&1; then
            echo "[ERROR] Bad zip (maybe HTML). First 60 lines:"; head -n 60 companyfacts.zip || true
            exit 1
          fi

      - name: Unzip companyfacts
        run: |
          set -e
          unzip -q companyfacts.zip -d cf
          echo "[DEBUG] Count of CIK*.json:"; find cf -type f -name 'CIK*.json' | wc -l

      - name: Download NasdaqTrader lists (UA) + tickers (UA)
        run: |
          set -e
          curl -L --fail --retry 5 --retry-all-errors --retry-delay 2 \
            -H "User-Agent: $UA" -o nasdaqlisted.txt \
            https://www.nasdaqtrader.com/dynamic/symdir/nasdaqlisted.txt
          curl -L --fail --retry 5 --retry-all-errors --retry-delay 2 \
            -H "User-Agent: $UA" -o otherlisted.txt \
            https://www.nasdaqtrader.com/dynamic/symdir/otherlisted.txt
          curl -L --fail --retry 5 --retry-all-errors --retry-delay 2 \
            -H "User-Agent: $UA" -H "Accept-Encoding: identity" -o tickers.json \
            https://www.sec.gov/files/company_tickers.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run shares extractor
        run: |
          set -e
          python3 extract_shares.py cf tickers.json public
          echo "[INFO] Shares artifacts:"; ls -lh public

      - name: Run SIC builder (proxy via Worker)
        env:
          UA: ${{ env.UA }}
          SIC_PROXY_BASE: ${{ env.SIC_PROXY_BASE }}
          SEC_SIC_PROXY_BASE: ${{ env.SEC_SIC_PROXY_BASE }}
        run: |
          set -e
          python3 build_sic.py nasdaqlisted.txt otherlisted.txt tickers.json public
          echo "[INFO] SIC artifacts:"; ls -lh public
          echo "[INFO] sic-meta.json:"; jq '.' public/sic-meta.json

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    if: github.event.schedule != '0 3 1 * *'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  heartbeat:
    # allow monthly cron OR manual run
    if: (github.event_name == 'schedule' && github.event.schedule == '0 3 1 * *') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensure branch metadata is present

      - name: Heartbeat commit
        run: |
          set -e
          # Configure author
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Determine branch safely
          BR="${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD)}"
          git pull --rebase origin "$BR" || true

          # Write/update the heartbeat file
          mkdir -p automation
          date -u +"%Y-%m-%dT%H:%M:%SZ" > automation/heartbeat.txt
          git add automation/heartbeat.txt

          # Commit only if changed; then push
          if git commit -m "automation: heartbeat"; then
            git push origin "$BR"
          else
            echo "[INFO] No heartbeat change."
          fi
